@model MediaViewModel

<div class="container mx-auto p-4 mt-5 min-vh-100">
    <!-- Filter buttons -->
    <div class="mb-6 flex gap-2 flex-wrap">
        <button class="filter-btn active px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700" data-type="all">
            All Files
        </button>
        <button class="filter-btn px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300" data-type="video">
            Videos
        </button>
        <button class="filter-btn px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300" data-type="image">
            Images
        </button>
        <button class="filter-btn px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300" data-type="audio">
            Audio
        </button>
        <button class="filter-btn px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300" data-type="pdf">
            PDFs
        </button>
    </div>

    <!-- Media Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        @foreach (var file in Model.Files)
        {
            <div class="media-item bg-white rounded-lg shadow-md overflow-hidden" data-type="@file.FileType">
                <div class="relative aspect-video">
                    @switch (file.FileType)
                    {
                        case "video":
                            <video class="w-full h-full object-cover cursor-pointer" controls preload="metadata">
                                <source src="@file.Url" type="video/mp4">
                            </video>
                            break;

                        case "image":
                            <img src="@file.Url"
                                 class="w-full h-full object-cover cursor-pointer"
                                 alt="@file.FileName"
                                 loading="lazy"
                                 onclick="showLightbox(this.src)" />
                            break;

                        case "audio":
                            <div class="w-full h-full flex items-center justify-center bg-gray-100">
                                <audio controls class="w-full px-4">
                                    <source src="@file.Url" type="audio/mpeg">
                                </audio>
                            </div>
                            break;

                        case "pdf":
                            <div class="w-full h-full flex items-center justify-center bg-gray-100">
                                <iframe src="@file.Url" class="w-full h-full"></iframe>
                            </div>
                            break;

                        default:
                            <div class="w-full h-full flex items-center justify-center bg-gray-100">
                                <span class="text-gray-500">Preview not available</span>
                            </div>
                            break;
                    }
                </div>
                <div class="p-3 border-t flex justify-between items-center">
                    <span class="text-sm text-gray-600 truncate max-w-[60%]" title="@file.FileName">
                        @file.FileName
                    </span>
                    <a href="@file.Url"
                       class="text-blue-600 hover:text-blue-800 text-sm font-medium"
                       download>
                        Download
                    </a>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Filter functionality
            const filterButtons = document.querySelectorAll('.filter-btn');
            const mediaItems = document.querySelectorAll('.media-item');

            filterButtons.forEach(button => {
                button.addEventListener('click', () => {
                    filterButtons.forEach(btn => btn.classList.remove('active', 'bg-blue-600', 'text-white'));
                    button.classList.add('active', 'bg-blue-600', 'text-white');

                    const type = button.getAttribute('data-type');
                    mediaItems.forEach(item => {
                        item.style.display = (type === 'all' || item.getAttribute('data-type') === type) ? '' : 'none';
                    });
                });
            });

            // Lightbox functionality
            function showLightbox(src) {
                const lightbox = document.getElementById('lightbox');
                document.getElementById('lightbox-img').src = src;
                lightbox.classList.remove('hidden');
                lightbox.classList.add('flex');
            }
        });
    </script>
}
